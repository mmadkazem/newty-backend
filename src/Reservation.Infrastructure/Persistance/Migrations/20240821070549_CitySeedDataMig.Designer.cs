// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Reservation.Infrastructure.Persistance.Context;

#nullable disable

namespace Reservation.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(ReservationDbContext))]
    [Migration("20240821070549_CitySeedDataMig")]
    partial class CitySeedDataMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessCategory", b =>
                {
                    b.Property<Guid>("BusinessesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("BusinessesId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BusinessCategory");
                });

            modelBuilder.Entity("BusinessUser", b =>
                {
                    b.Property<Guid>("BusinessesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersNormalId")
                        .HasColumnType("uuid");

                    b.HasKey("BusinessesId", "UsersNormalId");

                    b.HasIndex("UsersNormalId");

                    b.ToTable("BusinessUser");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67e1f31d-5d56-4a55-a4ac-99cef7be7f4e"),
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 330, DateTimeKind.Local).AddTicks(6669),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Admin",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "09111111111",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Admin.SmsPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SmsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SmsPlans");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Admin.TransferFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Percent")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TransferFees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2635bc0-c7f5-47cf-88c6-dc9cf3c125a0"),
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 332, DateTimeKind.Local).AddTicks(2923),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 1
                        });
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndHoursOfWor")
                        .HasColumnType("interval");

                    b.Property<int[]>("Holidays")
                        .HasColumnType("integer[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelReserveTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParvaneKasbImagePath")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SmsCreditId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("StartHoursOfWor")
                        .HasColumnType("interval");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("WalletId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.BusinessService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.SmsCredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SmsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("SmsCredits");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.SmsTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("SmsTemplates");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.UserVIP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersVIP");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Cities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Alternatives")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FaName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6979e8ce-5f2a-468e-b579-4ce2c27100c9"),
                            Alternatives = new List<string> { "tehran" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(4520),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "تهران",
                            IsDeleted = false,
                            Key = "tehran",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("511680d1-3191-4d44-aad6-5f46f4eee182"),
                            Alternatives = new List<string> { "ahwaz", "ahvaz" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(4784),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "اهواز",
                            IsDeleted = false,
                            Key = "ahwaz",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2459068b-6b0c-47a1-a299-18900fbd4ed4"),
                            Alternatives = new List<string> { "shiraz" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(4862),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "شیراز",
                            IsDeleted = false,
                            Key = "shiraz",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fe6295c8-50d1-4ce7-99c0-d681edecbbab"),
                            Alternatives = new List<string> { "mashhad" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(4924),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "مشهد",
                            IsDeleted = false,
                            Key = "mashhad",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e1d368d9-45ab-4daf-a4bf-b4f09b575f4f"),
                            Alternatives = new List<string> { "bandar abbas" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(4990),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "بندر عباس",
                            IsDeleted = false,
                            Key = "bandar-abbas",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("044947b9-e2fa-48b1-b0f2-361da01e10d3"),
                            Alternatives = new List<string> { "isfahan", "esfahan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5049),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "اصفهان",
                            IsDeleted = false,
                            Key = "isfahan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d1de7180-20c8-4cf9-a90c-04720d91c50a"),
                            Alternatives = new List<string> { "tabriz" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5115),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "تبریز",
                            IsDeleted = false,
                            Key = "tabriz",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("12cba520-6cb8-48aa-a464-8dbfc45b4acc"),
                            Alternatives = new List<string> { "kish" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5182),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "کیش",
                            IsDeleted = false,
                            Key = "kish",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("56245a47-a6dd-408e-8f55-7886db01be2c"),
                            Alternatives = new List<string> { "abadan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5248),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "آبادان",
                            IsDeleted = false,
                            Key = "abadan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1b6c2033-9ec8-4167-8273-058f83dc403a"),
                            Alternatives = new List<string> { "arak" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5314),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "اراک",
                            IsDeleted = false,
                            Key = "arak",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ad6c225d-3315-44c1-a0ae-39bb7e60722c"),
                            Alternatives = new List<string> { "ardabil" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5378),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "اردبیل",
                            IsDeleted = false,
                            Key = "ardabil",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ff002bb6-d9e4-431a-83d5-bff8b3679de4"),
                            Alternatives = new List<string> { "orumiyeh" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5440),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "ارومیه",
                            IsDeleted = false,
                            Key = "orumiyeh",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2b0f4a8c-ae50-483e-ab43-c377d5542c57"),
                            Alternatives = new List<string> { "omIdieh" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5505),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "امیدیه",
                            IsDeleted = false,
                            Key = "omIdieh",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3f7f9b70-088e-4c51-ab5c-910f38623793"),
                            Alternatives = new List<string> { "iranshahr" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5569),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "ایران شهر",
                            IsDeleted = false,
                            Key = "iranshahr",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("19705072-6766-478e-b1f1-099603369129"),
                            Alternatives = new List<string> { "ilam" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5637),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "ایلام",
                            IsDeleted = false,
                            Key = "ilam",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("021a54be-4266-4780-ad0c-7680688d9f36"),
                            Alternatives = new List<string> { "bojnourd" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5701),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "بجنورد",
                            IsDeleted = false,
                            Key = "bojnourd",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a1786c97-9eaf-4c78-96ca-f31b935bc667"),
                            Alternatives = new List<string> { "bam" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5763),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "بم",
                            IsDeleted = false,
                            Key = "bam",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2ffbaf0b-9621-4f8d-9156-6a18238f9b53"),
                            Alternatives = new List<string> { "bandar lengeh" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5816),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "بندر لنگه",
                            IsDeleted = false,
                            Key = "bandar-lengeh",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5319fd9d-5d6f-4c8f-9cef-5385dfcbc545"),
                            Alternatives = new List<string> { "bushehr", "booshehr" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5869),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "بوشهر",
                            IsDeleted = false,
                            Key = "bushehr",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("882113bb-a3d9-44a9-a0a3-7774c98c3b0e"),
                            Alternatives = new List<string> { "birjand" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5924),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "بیرجند",
                            IsDeleted = false,
                            Key = "birjand",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c40478c3-8165-41f6-bc5c-73e82a9c7305"),
                            Alternatives = new List<string> { "pars-abad" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(5973),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "پارس آباد",
                            IsDeleted = false,
                            Key = "pars-abad",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5e3997e-6cf9-4080-90ab-86a5d6b45953"),
                            Alternatives = new List<string> { "jask" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6026),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "جاسک",
                            IsDeleted = false,
                            Key = "jask",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("172c2c8f-1800-4e0f-acd4-ef5a1e2f9213"),
                            Alternatives = new List<string> { "jahrom" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6081),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "جهرم",
                            IsDeleted = false,
                            Key = "jahrom",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8a48d0ae-4297-46a6-926e-19e936a08428"),
                            Alternatives = new List<string> { "jiroft" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6133),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "جیرفت",
                            IsDeleted = false,
                            Key = "jiroft",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("57f276e4-b2ce-4fc8-a346-180b1c412de1"),
                            Alternatives = new List<string> { "chabahar" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6267),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "چابهار",
                            IsDeleted = false,
                            Key = "chabahar",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a3231945-d2ca-4ff0-85c9-21ae34da5f42"),
                            Alternatives = new List<string> { "khark" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6341),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "خارک",
                            IsDeleted = false,
                            Key = "khark",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("19349721-8952-4623-9863-f17b856e4201"),
                            Alternatives = new List<string> { "khorramabad" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6391),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "خرم آباد",
                            IsDeleted = false,
                            Key = "khorramabad",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("36aedc91-6b85-4201-baee-394102453b86"),
                            Alternatives = new List<string> { "khoy" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6446),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "خوی",
                            IsDeleted = false,
                            Key = "khoy",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("75c76800-2a81-4b4e-a6d6-ad18827ece45"),
                            Alternatives = new List<string> { "dezful" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6513),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "دزفول",
                            IsDeleted = false,
                            Key = "dezful",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("76482101-3aaa-4ba9-a95e-a1d300e7c92e"),
                            Alternatives = new List<string> { "ramsar" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6577),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "رامسر",
                            IsDeleted = false,
                            Key = "ramsar",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("73c81768-44a1-4a94-be4e-f79eaf577167"),
                            Alternatives = new List<string> { "rasht" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6640),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "رشت",
                            IsDeleted = false,
                            Key = "rasht",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3f092d22-a361-4380-8201-1deac30c7eb8"),
                            Alternatives = new List<string> { "rafsanjan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6705),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "رفسنجان",
                            IsDeleted = false,
                            Key = "rafsanjan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("392876fd-f90d-4825-a32b-46feafa7ef4d"),
                            Alternatives = new List<string> { "zabol" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6770),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "زابل",
                            IsDeleted = false,
                            Key = "zabol",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("15e161a8-554e-4d84-a011-f17e1e4bbc3f"),
                            Alternatives = new List<string> { "zahedan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6837),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "زاهدان",
                            IsDeleted = false,
                            Key = "zahedan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4a46d1f1-8bb0-4cb8-85c7-1929cb06e3b7"),
                            Alternatives = new List<string> { "zanjan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6903),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "زنجان",
                            IsDeleted = false,
                            Key = "zanjan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d6489a65-5488-4967-9ee5-77067554f936"),
                            Alternatives = new List<string> { "sari" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(6966),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "ساری",
                            IsDeleted = false,
                            Key = "sari",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0f10d758-0cba-46df-92a9-8fdb3858cca7"),
                            Alternatives = new List<string> { "sabzevar" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7030),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "سبزوار",
                            IsDeleted = false,
                            Key = "sabzevar",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ad8c177c-61c3-4243-aadc-092c897dc72f"),
                            Alternatives = new List<string> { "semnan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7091),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "سمنان",
                            IsDeleted = false,
                            Key = "semnan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("718e45e8-a398-4725-bfe6-ad184b0e9541"),
                            Alternatives = new List<string> { "sanandaj" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7145),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "سنندج",
                            IsDeleted = false,
                            Key = "sanandaj",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("223eba20-a0ed-4f63-ac3e-b4cc50c4923f"),
                            Alternatives = new List<string> { "maragheh" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7196),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "مراغه",
                            IsDeleted = false,
                            Key = "maragheh",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("99e93656-edd9-4d2d-bd43-8b81437dba0f"),
                            Alternatives = new List<string> { "syrjan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7243),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "سیرجان",
                            IsDeleted = false,
                            Key = "syrjan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2ac079e7-d52d-46c3-8ef2-2f951e9a360d"),
                            Alternatives = new List<string> { "shahroud" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7293),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "شاهرود",
                            IsDeleted = false,
                            Key = "shahroud",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c49b9f4-90c8-4fab-be77-6403bfeeb487"),
                            Alternatives = new List<string> { "shahrekord" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7344),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "شهرکرد",
                            IsDeleted = false,
                            Key = "shahrekord",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dabec0ed-ba17-4807-9041-d6706aa0aa49"),
                            Alternatives = new List<string> { "tabas" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7397),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "طبس",
                            IsDeleted = false,
                            Key = "tabas",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("38d0d97a-dc59-4067-b255-81b0d237ed7c"),
                            Alternatives = new List<string> { "asalouyeh" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7450),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "عسلویه",
                            IsDeleted = false,
                            Key = "asalouyeh",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1cb92aa7-68a3-4e7c-a308-49d0dfed5841"),
                            Alternatives = new List<string> { "omidieh" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7501),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "امیدیه",
                            IsDeleted = false,
                            Key = "omidieh",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f91c4eb3-621a-4db0-900c-fc24198f8718"),
                            Alternatives = new List<string> { "qeshm" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7560),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "قشم",
                            IsDeleted = false,
                            Key = "qeshm",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dda8a974-f10d-4b38-9c5a-bf085d85f5e4"),
                            Alternatives = new List<string> { "qom", "ghom" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7619),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "قم",
                            IsDeleted = false,
                            Key = "qom",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a6e7713-475a-4192-bc75-18bdf3849077"),
                            Alternatives = new List<string> { "kashan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7686),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "کاشان",
                            IsDeleted = false,
                            Key = "kashan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("921c90cc-0170-4b2c-9ceb-702c78e3b775"),
                            Alternatives = new List<string> { "karaj" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7735),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "کرج",
                            IsDeleted = false,
                            Key = "karaj",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9c592f92-6aab-4d8c-8526-4d99631b5d95"),
                            Alternatives = new List<string> { "kerman" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7791),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "کرمان",
                            IsDeleted = false,
                            Key = "kerman",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e3eec5c4-1fbb-4ff0-b54c-bfc6c5fbf7fa"),
                            Alternatives = new List<string> { "kermanshah" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(7937),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "کرمانشاه",
                            IsDeleted = false,
                            Key = "kermanshah",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4df58cb6-68cf-459a-a09c-9b233a1db4ab"),
                            Alternatives = new List<string> { "kolaleh" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8006),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "کولاله",
                            IsDeleted = false,
                            Key = "kolaleh",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b595d16b-7be5-48b4-b8b2-cc4d10c6946c"),
                            Alternatives = new List<string> { "gachsaran" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8070),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "گچساران",
                            IsDeleted = false,
                            Key = "gachsaran",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2d22b9f7-ec8f-446c-9eed-af22d21ff194"),
                            Alternatives = new List<string> { "gorgan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8132),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "گرگان",
                            IsDeleted = false,
                            Key = "gorgan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("44e5f7fb-a9e6-4f1e-bb25-03924a06c124"),
                            Alternatives = new List<string> { "lar" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8196),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "لار",
                            IsDeleted = false,
                            Key = "lar",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4166380e-133a-4428-ba44-6298406dca2c"),
                            Alternatives = new List<string> { "lamard" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8259),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "لامراد",
                            IsDeleted = false,
                            Key = "lamard",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b713db78-eac0-48e5-a576-7a14057a5542"),
                            Alternatives = new List<string> { "makou" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8325),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "ماکو",
                            IsDeleted = false,
                            Key = "makou",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5e46c30-604f-41f7-8188-84fca3b06b24"),
                            Alternatives = new List<string> { "mahshahr" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8390),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "ماهشار",
                            IsDeleted = false,
                            Key = "mahshahr",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("160c7d8e-d839-4b4c-a8c9-39cbe5a38d37"),
                            Alternatives = new List<string> { "noshahr" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8452),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "نوشهر",
                            IsDeleted = false,
                            Key = "noshahr",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fe9a4b32-844e-49ec-ad99-21e49f771552"),
                            Alternatives = new List<string> { "hamedan" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8503),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "همدان",
                            IsDeleted = false,
                            Key = "hamedan",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("634826cc-9f97-48f9-a8c7-55155dcf0073"),
                            Alternatives = new List<string> { "yasouj" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8553),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "یاسوج",
                            IsDeleted = false,
                            Key = "yasouj",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("974203f2-f7d6-410f-91bc-89a7a706f964"),
                            Alternatives = new List<string> { "yazd" },
                            CreatedOn = new DateTime(2024, 8, 21, 10, 35, 47, 331, DateTimeKind.Local).AddTicks(8603),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FaName = "یزد",
                            IsDeleted = false,
                            Key = "yazd",
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Finances.BusinessRequestPay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Authorizy")
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPay")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RefId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessRequestPays");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Finances.UserRequestPay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Authorizy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPay")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RefId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRequestPays");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Points.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReserveTimeReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReserveTimeSenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReserveTimeReceiptId");

                    b.HasIndex("ReserveTimeSenderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReserveItems");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPay")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TransactionReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionSenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusinessReceiptId");

                    b.HasIndex("BusinessSenderId");

                    b.HasIndex("TransactionReceiptId");

                    b.HasIndex("TransactionSenderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ReserveTimesReceipt");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeSender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPay")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessReceiptId");

                    b.HasIndex("BusinessSenderId");

                    b.ToTable("ReserveTimesSender");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Wallets.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Wallets.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BlockCredit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("BusinessCategory", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessUser", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UsersNormalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Account.User", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Cities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Reservation.Domain.Entities.Wallets.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("City");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Artist", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("Artists")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Business", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Cities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Wallets.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("City");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.BusinessService", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Artist", "Artist")
                        .WithMany("Services")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("Services")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Coupon", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.BusinessService", "Service")
                        .WithMany("Coupons")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Post", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("Posts")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.SmsCredit", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithOne("SmsCredit")
                        .HasForeignKey("Reservation.Domain.Entities.Businesses.SmsCredit", "BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.SmsTemplate", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("SmsTemplates")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.UserVIP", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("UsersVIP")
                        .HasForeignKey("BusinessId");

                    b.HasOne("Reservation.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Categories.Category", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Categories.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Finances.BusinessRequestPay", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Finances.UserRequestPay", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Points.Point", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Artist", null)
                        .WithMany("Points")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("Points")
                        .HasForeignKey("BusinessId");

                    b.HasOne("Reservation.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveItem", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", null)
                        .WithMany("ReserveItems")
                        .HasForeignKey("ReserveTimeReceiptId");

                    b.HasOne("Reservation.Domain.Entities.Reserve.ReserveTimeSender", null)
                        .WithMany("ReserveItems")
                        .HasForeignKey("ReserveTimeSenderId");

                    b.HasOne("Reservation.Domain.Entities.Businesses.BusinessService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "BusinessReceipt")
                        .WithMany("ReserveTimesReceipt")
                        .HasForeignKey("BusinessReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "BusinessSender")
                        .WithMany()
                        .HasForeignKey("BusinessSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Wallets.Transaction", "TransactionReceipt")
                        .WithMany()
                        .HasForeignKey("TransactionReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Wallets.Transaction", "TransactionSender")
                        .WithOne()
                        .HasForeignKey("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", "TransactionSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessReceipt");

                    b.Navigation("BusinessSender");

                    b.Navigation("TransactionReceipt");

                    b.Navigation("TransactionSender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeSender", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "BusinessReceipt")
                        .WithMany()
                        .HasForeignKey("BusinessReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "BusinessSender")
                        .WithMany("ReserveTimesSender")
                        .HasForeignKey("BusinessSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessReceipt");

                    b.Navigation("BusinessSender");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Wallets.Transaction", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Wallets.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Artist", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Business", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Points");

                    b.Navigation("Posts");

                    b.Navigation("ReserveTimesReceipt");

                    b.Navigation("ReserveTimesSender");

                    b.Navigation("Services");

                    b.Navigation("SmsCredit");

                    b.Navigation("SmsTemplates");

                    b.Navigation("UsersVIP");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.BusinessService", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", b =>
                {
                    b.Navigation("ReserveItems");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeSender", b =>
                {
                    b.Navigation("ReserveItems");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Wallets.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
