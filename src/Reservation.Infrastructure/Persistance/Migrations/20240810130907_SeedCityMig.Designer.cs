// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Reservation.Infrastructure.Persistance.Context;

#nullable disable

namespace Reservation.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(ReservationDbContext))]
    [Migration("20240810130907_SeedCityMig")]
    partial class SeedCityMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessCategory", b =>
                {
                    b.Property<Guid>("BusinessesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("BusinessesId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BusinessCategory");
                });

            modelBuilder.Entity("BusinessUser", b =>
                {
                    b.Property<Guid>("BusinessesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersNormalId")
                        .HasColumnType("uuid");

                    b.HasKey("BusinessesId", "UsersNormalId");

                    b.HasIndex("UsersNormalId");

                    b.ToTable("BusinessUser");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb17551f-1b01-4b76-b938-739bc9c973d6"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 453, DateTimeKind.Local).AddTicks(7612),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Admin",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "09111111111",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Admin.SmsPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SmsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SmsPlans");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Admin.TransferFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Percent")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TransferFees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5a31585-724d-45c7-89fe-2a76952af65d"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(2599),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 1
                        });
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndHoursOfWor")
                        .HasColumnType("interval");

                    b.Property<int[]>("Holidays")
                        .HasColumnType("integer[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelReserveTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParvaneKasbImagePath")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SmsCreditId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("StartHoursOfWor")
                        .HasColumnType("interval");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("WalletId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.BusinessService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.SmsCredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SmsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("SmsCredits");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.SmsTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("SmsTemplates");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.UserVIP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersVIP");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Cities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb081377-f652-4adc-b153-60ac10380a6b"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(436),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "تهران"
                        },
                        new
                        {
                            Id = new Guid("15170d9c-e850-46b5-bfb7-a04664e76b3d"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(567),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "اهواز"
                        },
                        new
                        {
                            Id = new Guid("2e784626-7df6-44d0-804a-1d3ac8673f7b"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(579),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "شیراز"
                        },
                        new
                        {
                            Id = new Guid("bb84534f-45a6-4e23-b640-bba637db0f1b"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(587),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "مشهد"
                        },
                        new
                        {
                            Id = new Guid("450218a2-bc26-4e2a-ad21-16bcf1ab996f"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(595),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "بندر عباس"
                        },
                        new
                        {
                            Id = new Guid("0855c105-cdd5-4619-8217-ff1a497aa179"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(607),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = new Guid("f6fa4bbd-79cc-402c-8f26-1c5674e879a1"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(616),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "تبریز"
                        },
                        new
                        {
                            Id = new Guid("d5a91502-9371-4852-8f2a-0f906c09f8a8"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(624),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "کیش"
                        },
                        new
                        {
                            Id = new Guid("f180c9be-ac7f-4787-b5c2-3c5cab4cb711"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(632),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "آبادان"
                        },
                        new
                        {
                            Id = new Guid("19073e0d-14cf-4833-b4f2-1aa8cd43a529"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(641),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "اراک"
                        },
                        new
                        {
                            Id = new Guid("c2b367df-b432-4c51-a8da-ac9c87a23239"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(649),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = new Guid("8a9b71d5-31a4-4c64-81c3-5f2cf6adc68d"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(656),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ارومیه"
                        },
                        new
                        {
                            Id = new Guid("70922a9c-6ebd-43a1-9424-47141ab44996"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(663),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "امیدیه"
                        },
                        new
                        {
                            Id = new Guid("82beca37-8015-4c34-8ff0-25c205f0f077"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(671),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ایران شهر"
                        },
                        new
                        {
                            Id = new Guid("5d5fba78-4b9c-4112-b76d-01ef49a77ad6"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(679),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = new Guid("666e7b29-8999-48e7-8431-a396d66eed90"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(687),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "بجنورد"
                        },
                        new
                        {
                            Id = new Guid("6d31d1ea-bad1-43c5-89be-c36d57fe5e0e"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(694),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "بم"
                        },
                        new
                        {
                            Id = new Guid("4be4fb83-3b11-4086-a187-19eee3f64ab7"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(703),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "بندر لنگه"
                        },
                        new
                        {
                            Id = new Guid("7b03a727-f521-4d7d-81c0-f6696b9764f1"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(711),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = new Guid("2a5d5d53-f90d-4e19-9eef-5731261f4d82"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(719),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "بیرجند"
                        },
                        new
                        {
                            Id = new Guid("f75791de-4aa7-4b67-8e6c-c63c97080dad"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(726),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "پارس آباد"
                        },
                        new
                        {
                            Id = new Guid("fa9ec8fb-96e3-46d4-a98f-d585cf9e4d96"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(734),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "جاسک"
                        },
                        new
                        {
                            Id = new Guid("12ffbd47-ee3a-4036-a746-c45a4ccd4a20"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(741),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "جهرم"
                        },
                        new
                        {
                            Id = new Guid("c5734116-545b-4daf-b5a7-6da949853af5"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(749),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "جیرفت"
                        },
                        new
                        {
                            Id = new Guid("7c09666c-88b6-40f3-a13c-c5397dbe0496"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(756),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "چابهار"
                        },
                        new
                        {
                            Id = new Guid("71fb41bd-44b4-46a7-a204-2c296d4e3261"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(764),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "خارک"
                        },
                        new
                        {
                            Id = new Guid("6816512f-5dbf-4745-b672-254f8e7dd89a"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(771),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "خرم آباد"
                        },
                        new
                        {
                            Id = new Guid("73b5adec-1244-404d-aaa9-76245a54bed7"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(779),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "خوی"
                        },
                        new
                        {
                            Id = new Guid("508a77f4-d926-4d65-bf1b-4a096773255b"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(787),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "دزفول"
                        },
                        new
                        {
                            Id = new Guid("a0e78fc5-cdff-44e9-83c9-949288e9627e"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(794),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "رامسر"
                        },
                        new
                        {
                            Id = new Guid("982635e0-4f2b-4824-a35e-b197ff2c4342"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(802),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "رشت"
                        },
                        new
                        {
                            Id = new Guid("d2d786d6-0200-4f3a-815e-042a7fb00353"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(810),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "رفسنجان"
                        },
                        new
                        {
                            Id = new Guid("0c8f675e-1235-440d-9555-5c42cd7a6cd2"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(818),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "زابل"
                        },
                        new
                        {
                            Id = new Guid("9c84908f-251b-4912-a0fc-0336165d2071"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(827),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "زاهدان"
                        },
                        new
                        {
                            Id = new Guid("4ea5fd9b-f610-44cb-ba5e-c5d2453c6bc9"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(834),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = new Guid("295bef88-2787-4f08-a095-152033a13437"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(842),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ساری"
                        },
                        new
                        {
                            Id = new Guid("e3703711-7aad-483a-9eb1-ec4b7347301c"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(849),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "سبزوار"
                        },
                        new
                        {
                            Id = new Guid("47340e32-d499-400f-a7de-8177af670ba4"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(857),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = new Guid("b50c4bef-e7f6-448b-b2db-e22c84535b92"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(864),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "سنندج"
                        },
                        new
                        {
                            Id = new Guid("12fa5562-2711-4ba7-bd6c-a36e3f11814f"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(872),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "مراغه"
                        },
                        new
                        {
                            Id = new Guid("d0bad1df-fc60-4aad-b566-ac46c1ba8d66"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(880),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "سیرجان"
                        },
                        new
                        {
                            Id = new Guid("097b65db-4bba-48e3-9131-bb80066fa02c"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(887),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "شاهرود"
                        },
                        new
                        {
                            Id = new Guid("64e405a9-8fcb-46ae-841d-b0f9f93b6662"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(895),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "شهرکرد"
                        },
                        new
                        {
                            Id = new Guid("dc8137ac-457c-4502-aebb-46b3a842e389"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(902),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "طبس"
                        },
                        new
                        {
                            Id = new Guid("bb34eb52-d14e-4fc1-a8fa-76644a0684cd"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(910),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "عسلویه"
                        },
                        new
                        {
                            Id = new Guid("fdb090f2-6316-4ebc-8178-dbecb276516c"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(917),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "قشم"
                        },
                        new
                        {
                            Id = new Guid("61aca7cf-2ab5-410d-aa3b-712e4ee44352"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(992),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "قم"
                        },
                        new
                        {
                            Id = new Guid("b4edfc09-2945-4b97-a17d-e6773f658d2a"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1000),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "کاشان"
                        },
                        new
                        {
                            Id = new Guid("cc7d3fd0-28db-4068-b532-b90d645cd37a"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1008),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "کرج"
                        },
                        new
                        {
                            Id = new Guid("aed264f1-b292-41bb-b876-4a8bc2d6c964"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1015),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = new Guid("a8543d00-0172-484c-a76d-59d9dc5a4687"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1023),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = new Guid("151bb9db-ca79-488c-977d-71d7886dd70d"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1030),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "کولاله"
                        },
                        new
                        {
                            Id = new Guid("d8bc5526-5a3d-4b56-8463-435ffacbf51b"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1038),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "گچساران"
                        },
                        new
                        {
                            Id = new Guid("3bd82e88-e4c0-4d0c-acc7-69fdc7f3d0d4"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1046),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "گرگان"
                        },
                        new
                        {
                            Id = new Guid("5cb1472b-9a86-4d2a-aff0-b30b71af23a9"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1054),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "لار"
                        },
                        new
                        {
                            Id = new Guid("494e1988-f6df-4d9c-839f-f99ebec6d6e4"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1061),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "لامراد"
                        },
                        new
                        {
                            Id = new Guid("2e3c1c2c-716e-4bbd-94d5-5899231b5e7c"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1069),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ماکو"
                        },
                        new
                        {
                            Id = new Guid("67591f60-6ad5-405a-b4ab-ad05e1772347"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1076),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ماهشار"
                        },
                        new
                        {
                            Id = new Guid("feec8d4e-d64c-428c-8392-4daae7ab10ef"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1084),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "نوشهر"
                        },
                        new
                        {
                            Id = new Guid("98cf31e9-b59d-4f83-9651-cb4d21d283e9"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1091),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "همدان"
                        },
                        new
                        {
                            Id = new Guid("1a1827e7-9530-4cc9-bd71-a2c153911958"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1099),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "یاسوج"
                        },
                        new
                        {
                            Id = new Guid("a9c30179-e8a9-4b20-b391-1e591dd25466"),
                            CreatedOn = new DateTime(2024, 8, 10, 16, 39, 6, 454, DateTimeKind.Local).AddTicks(1106),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Finances.BusinessRequestPay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Authorizy")
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPay")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RefId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessRequestPays");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Finances.UserRequestPay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Authorizy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPay")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RefId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRequestPays");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Points.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReserveTimeReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReserveTimeSenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReserveTimeReceiptId");

                    b.HasIndex("ReserveTimeSenderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReserveItems");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPay")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TransactionReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionSenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusinessReceiptId");

                    b.HasIndex("BusinessSenderId");

                    b.HasIndex("TransactionReceiptId");

                    b.HasIndex("TransactionSenderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ReserveTimesReceipt");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeSender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPay")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessReceiptId");

                    b.HasIndex("BusinessSenderId");

                    b.ToTable("ReserveTimesSender");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Wallets.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Wallets.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BlockCredit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("BusinessCategory", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessUser", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UsersNormalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Account.User", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Cities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Reservation.Domain.Entities.Wallets.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("City");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Artist", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("Artists")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Business", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Cities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Wallets.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("City");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.BusinessService", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Artist", "Artist")
                        .WithMany("Services")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("Services")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Coupon", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.BusinessService", "Service")
                        .WithMany("Coupons")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Post", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("Posts")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.SmsCredit", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithOne("SmsCredit")
                        .HasForeignKey("Reservation.Domain.Entities.Businesses.SmsCredit", "BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.SmsTemplate", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("SmsTemplates")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.UserVIP", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("UsersVIP")
                        .HasForeignKey("BusinessId");

                    b.HasOne("Reservation.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Categories.Category", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Categories.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Finances.BusinessRequestPay", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Finances.UserRequestPay", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Points.Point", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Artist", null)
                        .WithMany("Points")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "Business")
                        .WithMany("Points")
                        .HasForeignKey("BusinessId");

                    b.HasOne("Reservation.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveItem", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", null)
                        .WithMany("ReserveItems")
                        .HasForeignKey("ReserveTimeReceiptId");

                    b.HasOne("Reservation.Domain.Entities.Reserve.ReserveTimeSender", null)
                        .WithMany("ReserveItems")
                        .HasForeignKey("ReserveTimeSenderId");

                    b.HasOne("Reservation.Domain.Entities.Businesses.BusinessService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "BusinessReceipt")
                        .WithMany("ReserveTimesReceipt")
                        .HasForeignKey("BusinessReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "BusinessSender")
                        .WithMany()
                        .HasForeignKey("BusinessSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Wallets.Transaction", "TransactionReceipt")
                        .WithMany()
                        .HasForeignKey("TransactionReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Wallets.Transaction", "TransactionSender")
                        .WithOne()
                        .HasForeignKey("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", "TransactionSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessReceipt");

                    b.Navigation("BusinessSender");

                    b.Navigation("TransactionReceipt");

                    b.Navigation("TransactionSender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeSender", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "BusinessReceipt")
                        .WithMany()
                        .HasForeignKey("BusinessReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservation.Domain.Entities.Businesses.Business", "BusinessSender")
                        .WithMany("ReserveTimesSender")
                        .HasForeignKey("BusinessSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessReceipt");

                    b.Navigation("BusinessSender");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Wallets.Transaction", b =>
                {
                    b.HasOne("Reservation.Domain.Entities.Wallets.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Artist", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.Business", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Points");

                    b.Navigation("Posts");

                    b.Navigation("ReserveTimesReceipt");

                    b.Navigation("ReserveTimesSender");

                    b.Navigation("Services");

                    b.Navigation("SmsCredit");

                    b.Navigation("SmsTemplates");

                    b.Navigation("UsersVIP");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Businesses.BusinessService", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeReceipt", b =>
                {
                    b.Navigation("ReserveItems");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Reserve.ReserveTimeSender", b =>
                {
                    b.Navigation("ReserveItems");
                });

            modelBuilder.Entity("Reservation.Domain.Entities.Wallets.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
